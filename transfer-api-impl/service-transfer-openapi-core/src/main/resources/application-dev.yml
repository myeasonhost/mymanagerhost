spring:
  datasource:
    name: dataSource
    url: jdbc:mysql://192.168.1.230:3306/ry
    username: root
    password: eason
    connectionProperties: config.decrypt=false
    # 使用druid数据源
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.jdbc.Driver
    filters: config,stat
    maxWait: 60000
    maxActive: 20
    initialSize: 1
    minIdle: 1
    validationQuery: select 1
    testWhileIdle: true
    poolPreparedStatements: true
    timeBetweenEvictionRunsMillis: 60000
    minEvictableIdleTimeMillis: 300000
    testOnBorrow: false
    testOnReturn: false
    logSlowSql: true
  web:
    resources:
      static-locations: classpath:/templates/
  # redis 配置
  redis:
    # 地址
    host: 192.168.1.230
    # 端口，默认为6379
    port: 6379
    # 数据库索引
    database: 0
    # 密码
    password:
    # 连接超时时间
    timeout: 10s
    lettuce:
      pool:
        # 连接池中的最小空闲连接
        min-idle: 0
        # 连接池中的最大空闲连接
        max-idle: 8
        # 连接池的最大数据库连接数
        max-active: 8
        # #连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: -1ms
spring.rabbitmq.host: 192.168.1.230
spring.rabbitmq.port: 5672
spring.rabbitmq.username: guest
spring.rabbitmq.password: guest
spring.rabbitmq.virtual-host: /
spring.rabbitmq.publisher-confirm-type: correlated

# 超时订单通知-发送者
spring.cloud.stream.bindings.payTimeOutput.destination: payTimeOut
spring.cloud.stream.bindings.payTimeOutput.content-type: application/json
spring.cloud.stream.rabbit.bindings.payTimeOutput.producer.delayed-exchange: true

# 超时订单通知-接收者
spring.cloud.stream.bindings.payTimeInput.destination: payTimeOut
spring.cloud.stream.bindings.payTimeInput.content-type: application/json
spring.cloud.stream.bindings.payTimeInput.group: notify
spring.cloud.stream.bindings.payTimeInput.consumer.concurrency: 1

# 回调订单通知-发送者
spring.cloud.stream.bindings.payOutput.destination: payOrder
spring.cloud.stream.bindings.payOutput.content-type: application/json
spring.cloud.stream.rabbit.bindings.payOutput.producer.delayed-exchange: true

# 回调订单通知-接收者
spring.cloud.stream.bindings.payInput.destination: payOrder
spring.cloud.stream.bindings.payInput.content-type: application/json
spring.cloud.stream.bindings.payInput.group: callback
spring.cloud.stream.bindings.payInput.consumer.concurrency: 1
