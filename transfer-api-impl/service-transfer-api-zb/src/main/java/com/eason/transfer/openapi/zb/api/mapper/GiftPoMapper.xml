<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.eason.transfer.openapi.zb.api.mapper.GiftPoMapper">
  <resultMap id="BaseResultMap" type="com.eason.transfer.openapi.zb.api.entity.GiftPo">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="gift_name" jdbcType="VARCHAR" property="giftName" />
    <result column="gift_lmg" jdbcType="VARCHAR" property="giftLmg" />
    <result column="gift_price" jdbcType="DECIMAL" property="giftPrice" />
    <result column="specialStyle" jdbcType="VARCHAR" property="specialstyle" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, gift_name, gift_lmg, gift_price, specialStyle
  </sql>
  <select id="selectByExample" parameterType="com.eason.transfer.openapi.zb.api.entity.GiftPoExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_zb_user_gift
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_zb_user_gift
    where id = #{id,jdbcType=INTEGER}
  </select>

  <select id="selectByGiftName" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from t_zb_user_gift
    where gift_name = #{giftName,jdbcType=VARCHAR}
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from t_zb_user_gift
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.eason.transfer.openapi.zb.api.entity.GiftPoExample">
    delete from t_zb_user_gift
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.eason.transfer.openapi.zb.api.entity.GiftPo">
    insert into t_zb_user_gift (id, gift_name, gift_lmg, 
      gift_price, specialStyle)
    values (#{id,jdbcType=INTEGER}, #{giftName,jdbcType=VARCHAR}, #{giftLmg,jdbcType=VARCHAR}, 
      #{giftPrice,jdbcType=DECIMAL}, #{specialstyle,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.eason.transfer.openapi.zb.api.entity.GiftPo">
    insert into t_zb_user_gift
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="giftName != null">
        gift_name,
      </if>
      <if test="giftLmg != null">
        gift_lmg,
      </if>
      <if test="giftPrice != null">
        gift_price,
      </if>
      <if test="specialstyle != null">
        specialStyle,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="giftName != null">
        #{giftName,jdbcType=VARCHAR},
      </if>
      <if test="giftLmg != null">
        #{giftLmg,jdbcType=VARCHAR},
      </if>
      <if test="giftPrice != null">
        #{giftPrice,jdbcType=DECIMAL},
      </if>
      <if test="specialstyle != null">
        #{specialstyle,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.eason.transfer.openapi.zb.api.entity.GiftPoExample" resultType="java.lang.Long">
    select count(*) from t_zb_user_gift
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update t_zb_user_gift
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.giftName != null">
        gift_name = #{record.giftName,jdbcType=VARCHAR},
      </if>
      <if test="record.giftLmg != null">
        gift_lmg = #{record.giftLmg,jdbcType=VARCHAR},
      </if>
      <if test="record.giftPrice != null">
        gift_price = #{record.giftPrice,jdbcType=DECIMAL},
      </if>
      <if test="record.specialstyle != null">
        specialStyle = #{record.specialstyle,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update t_zb_user_gift
    set id = #{record.id,jdbcType=INTEGER},
      gift_name = #{record.giftName,jdbcType=VARCHAR},
      gift_lmg = #{record.giftLmg,jdbcType=VARCHAR},
      gift_price = #{record.giftPrice,jdbcType=DECIMAL},
      specialStyle = #{record.specialstyle,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.eason.transfer.openapi.zb.api.entity.GiftPo">
    update t_zb_user_gift
    <set>
      <if test="giftName != null">
        gift_name = #{giftName,jdbcType=VARCHAR},
      </if>
      <if test="giftLmg != null">
        gift_lmg = #{giftLmg,jdbcType=VARCHAR},
      </if>
      <if test="giftPrice != null">
        gift_price = #{giftPrice,jdbcType=DECIMAL},
      </if>
      <if test="specialstyle != null">
        specialStyle = #{specialstyle,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.eason.transfer.openapi.zb.api.entity.GiftPo">
    update t_zb_user_gift
    set gift_name = #{giftName,jdbcType=VARCHAR},
      gift_lmg = #{giftLmg,jdbcType=VARCHAR},
      gift_price = #{giftPrice,jdbcType=DECIMAL},
      specialStyle = #{specialstyle,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>